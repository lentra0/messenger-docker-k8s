name: Deploy Messenger to Kubernetes

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-backend
  FRONTEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-frontend

jobs:
  setup-cluster:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y conntrack socat

    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube

    - name: Start Minikube cluster
      run: |
        minikube start --driver=docker --force
        minikube status

    - name: Generate proper kubeconfig
      id: kubeconfig
      run: |
        mkdir -p ~/.kube
        # Получаем IP кластера
        MINIKUBE_IP=$(minikube ip)

        # Создаем правильный kubeconfig вручную
        cat <<EOF > ~/.kube/config
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /home/runner/.minikube/ca.crt
    server: https://$MINIKUBE_IP:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /home/runner/.minikube/profiles/minikube/client.crt
    client-key: /home/runner/.minikube/profiles/minikube/client.key
EOF

        # Проверяем работоспособность
        kubectl config get-contexts
        kubectl cluster-info
        kubectl get nodes

        echo "KUBE_CONFIG=$(cat ~/.kube/config | base64 -w0)" >> $GITHUB_OUTPUT

    outputs:
      kubeconfig: ${{ steps.kubeconfig.outputs.KUBE_CONFIG }}

  deploy:
    needs: setup-cluster
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
        kubectl config get-contexts
        kubectl cluster-info

      env:
        KUBE_CONFIG: ${{ needs.setup-cluster.outputs.kubeconfig }}

    - name: Deploy application
      run: |
        kubectl apply -f k8s/
        kubectl get pods -w
