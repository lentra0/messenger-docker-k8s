name: Deploy Messenger to Kubernetes

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-backend
  FRONTEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-frontend

jobs:
  setup-cluster:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y conntrack socat

    - name: Install Minikube and kubectl
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install kubectl /usr/local/bin/kubectl

    - name: Start Minikube cluster
      run: |
        minikube start --driver=docker --force
        minikube addons enable ingress

        # Экспорт всех сертификатов в рабочую директорию
        mkdir -p ~/.kube/certs
        cp -r ~/.minikube/* ~/.kube/certs/
        echo "CERT_DIR=$(realpath ~/.kube/certs)" >> $GITHUB_ENV

    - name: Prepare kubeconfig
      id: kubeconfig
      run: |
        mkdir -p ~/.kube
        # Генерация kubeconfig с абсолютными путями
        minikube kubectl -- config view --raw | \
          sed "s|/home/runner/.minikube|${{ env.CERT_DIR }}|g" > ~/.kube/config

        # Проверка работоспособности
        kubectl config get-contexts
        kubectl cluster-info
        kubectl get nodes

        echo "KUBE_CONFIG=$(cat ~/.kube/config | base64 -w0)" >> $GITHUB_OUTPUT

    outputs:
      kubeconfig: ${{ steps.kubeconfig.outputs.KUBE_CONFIG }}

  build-and-push:
    needs: setup-cluster
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Backend
      run: |
        docker build -t ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./backend
        docker push ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  deploy:
    needs: [setup-cluster, build-and-push]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Restore kubectl config
      run: |
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
        # Восстанавливаем сертификаты
        mkdir -p ${{ env.CERT_DIR }}
        cp -r ~/.kube/certs/* ${{ env.CERT_DIR }}/

        kubectl config get-contexts
        kubectl cluster-info

      env:
        KUBE_CONFIG: ${{ needs.setup-cluster.outputs.kubeconfig }}
        CERT_DIR: ${{ needs.setup-cluster.env.CERT_DIR }}

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        kubectl rollout status deployment/backend --timeout=180s
        minikube service frontend-service --url
