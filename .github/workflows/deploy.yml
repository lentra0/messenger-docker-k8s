name: Deploy Messenger to Kubernetes

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-backend
  FRONTEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-frontend

jobs:
  setup-cluster:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y conntrack socat

    - name: Install Minikube and kubectl
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube version

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Start Minikube cluster
      run: |
        minikube start --driver=docker --force --alsologtostderr
        minikube config set WantUpdateNotification false
        minikube update-context
        minikube addons enable ingress

    - name: Prepare kubeconfig
      id: kubeconfig
      run: |
        mkdir -p ~/.kube
        minikube kubectl -- config view --minify --flatten > ~/.kube/config
        echo "KUBE_CONFIG=$(cat ~/.kube/config | base64 -w0)" >> $GITHUB_OUTPUT
        kubectl config current-context
        kubectl cluster-info

    outputs:
      kubeconfig: ${{ steps.kubeconfig.outputs.KUBE_CONFIG }}

  build-and-push:
    needs: setup-cluster
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Backend
      run: |
        docker build -t ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./backend
        docker push ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

    - name: Build and push Frontend
      run: |
        docker build -t ${{ env.FRONTEND_IMAGE }}:${{ github.sha }} ./frontend
        docker push ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  deploy:
    needs: [setup-cluster, build-and-push]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
        kubectl config get-contexts
        kubectl cluster-info
      env:
        KUBE_CONFIG: ${{ needs.setup-cluster.outputs.kubeconfig }}

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/redis.yaml --validate=false
        kubectl apply -f k8s/backend.yaml --validate=false
        kubectl apply -f k8s/frontend.yaml --validate=false

        kubectl rollout restart deployment/backend
        kubectl rollout restart deployment/frontend
        kubectl rollout status deployment/backend --timeout=120s
        kubectl rollout status deployment/frontend --timeout=120s

    - name: Verify deployment
      run: |
        kubectl get pods -o wide
        kubectl get svc
        echo "Frontend URL:"
        minikube service frontend-service --url
