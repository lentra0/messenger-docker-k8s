name: Deploy Messenger to Kubernetes

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-backend
  FRONTEND_IMAGE: ghcr.io/lentra0/messenger-docker-k8s-frontend

jobs:
  setup-cluster:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y conntrack socat

    - name: Install Minikube and kubectl
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install kubectl /usr/local/bin/kubectl

    - name: Start Minikube cluster
      run: |
        # Запускаем Minikube с явным указанием API-сервера
        minikube start \
          --driver=docker \
          --force \
          --apiserver-ips=127.0.0.1 \
          --apiserver-name=localhost \
          --apiserver-port=8443

        # Явно обновляем контекст
        minikube update-context --force

        # Проверяем работоспособность
        minikube status
        minikube ip

    - name: Generate reliable kubeconfig
      id: kubeconfig
      run: |
        mkdir -p ~/.kube
        # Получаем IP Minikube
        MINIKUBE_IP=$(minikube ip)

        # Генерируем kubeconfig с правильными путями
        cat <<EOF > ~/.kube/config
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /tmp/minikube/ca.crt
    server: https://$MINIKUBE_IP:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /tmp/minikube/client.crt
    client-key: /tmp/minikube/client.key
EOF

        # Копируем сертификаты в /tmp
        mkdir -p /tmp/minikube
        cp ~/.minikube/ca.crt /tmp/minikube/
        cp ~/.minikube/profiles/minikube/client.crt /tmp/minikube/
        cp ~/.minikube/profiles/minikube/client.key /tmp/minikube/

        # Проверяем подключение
        kubectl config use-context minikube
        kubectl cluster-info
        kubectl get nodes

        echo "KUBE_CONFIG=$(cat ~/.kube/config | base64 -w0)" >> $GITHUB_OUTPUT

    outputs:
      kubeconfig: ${{ steps.kubeconfig.outputs.KUBE_CONFIG }}

  deploy:
    needs: setup-cluster
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config

        # Восстанавливаем сертификаты
        mkdir -p /tmp/minikube
        echo "$CA_CRT" | base64 -d > /tmp/minikube/ca.crt
        echo "$CLIENT_CRT" | base64 -d > /tmp/minikube/client.crt
        echo "$CLIENT_KEY" | base64 -d > /tmp/minikube/client.key

        # Проверяем подключение
        kubectl config get-contexts
        kubectl cluster-info
        kubectl get nodes

      env:
        KUBE_CONFIG: ${{ needs.setup-cluster.outputs.kubeconfig }}
        CA_CRT: ${{ secrets.CA_CRT }}
        CLIENT_CRT: ${{ secrets.CLIENT_CRT }}
        CLIENT_KEY: ${{ secrets.CLIENT_KEY }}

    - name: Deploy application
      run: |
        kubectl apply -f k8s/
        kubectl rollout status deployment/backend --timeout=300s
        minikube service frontend-service --url
